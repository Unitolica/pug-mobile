// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(uuid())
  email             String            @unique
  name              String?
  password          String
  role              Role              @default(STUDENT)
  registration      String?           @default("")
  requestedTimeLogs TimeLog[]         @relation("requestedBy")
  approvedTimeLogs  TimeLog[]         @relation("approvedBy")
  deniedTimeLogs    TimeLog[]         @relation("deniedBy")
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  UserOnCourses     UserOnCourses[]
  UsersOnProjects   UsersOnProjects[]

  @@map("users")
}

enum Role {
  STUDENT
  PROFESSOR
  OWNER
  ADMIN
}

model University {
  id                  String   @id
  name                String
  description         String?
  internalobs         String?
  UniversitiesCourses Course[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("universities")
}

model Course {
  id          String   @id @default(uuid())
  name        String?
  abreviation String
  internalobs String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  universityId String
  university   University @relation(fields: [universityId], references: [id])

  UserOnCourses     UserOnCourses[]
  CoursesOnProjects CoursesOnProjects[]

  @@map("courses")
}

model UserOnCourses {
  course   Course @relation(fields: [courseId], references: [id])
  courseId String
  user     User   @relation(fields: [userId], references: [id])
  userId   String

  @@id([courseId, userId])
}

model Project {
  id                String              @id @default(uuid())
  name              String?
  description       String?
  hours             Int
  timeLog           TimeLog[]
  CoursesOnProjects CoursesOnProjects[]
  UsersOnProjects   UsersOnProjects[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@map("projects")
}

model CoursesOnProjects {
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@id([courseId, projectId])
}

model UsersOnProjects {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@id([userId, projectId])
}

model TimeLog {
  id              String   @id @default(uuid())
  description     String?
  geolocalization String?
  init            DateTime
  end             DateTime

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  requestedById String?
  approvedById  String?
  deniedById    String?
  requestedBy   User?   @relation("requestedBy", fields: [requestedById], references: [id])
  approvedBy    User?   @relation("approvedBy", fields: [approvedById], references: [id])
  deniedBy      User?   @relation("deniedBy", fields: [deniedById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("timeLogs")
}
