// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid())
  email              String               @unique
  name               String?
  password           String
  role               Role                 @default(STUDENT)
  requestedTimeLogs  TimeLog[]            @relation("requestedBy")
  approvedTimeLogs   TimeLog[]            @relation("approvedBy")
  deniedTimeLogs     TimeLog[]            @relation("deniedBy")
  UserOnCourses      UserOnCourses[]
  UserOnUniversities UserOnUniversities[]
  UsersOnProjects    UsersOnProjects[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt

  @@map("users")
}

enum Role {
  STUDENT
  PROFESSOR
  OWNER
  ADMIN
}

model University {
  id                     String                   @id
  name                   String
  description            String?
  internalobs            String?
  UniversitiesOnCourses  UniversitiesOnCourses[]
  UserOnUniversities     UserOnUniversities[]
  UniversitiesOnProjects UniversitiesOnProjects[]
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt

  @@map("universities")
}

model UserOnUniversities {
  university   University @relation(fields: [universityId], references: [id])
  universityId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String

  @@id([universityId, userId])
}

model Course {
  id                    String                  @id @default(uuid())
  name                  String?
  UniversitiesOnCourses UniversitiesOnCourses[]
  UserOnCourses         UserOnCourses[]
  CoursesOnProjects     CoursesOnProjects[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt

  @@map("courses")
}

model UniversitiesOnCourses {
  course       Course     @relation(fields: [courseId], references: [id])
  courseId     String
  university   University @relation(fields: [universityId], references: [id])
  universityId String

  @@id([courseId, universityId])
}

model UserOnCourses {
  course   Course @relation(fields: [courseId], references: [id])
  courseId String
  user     User   @relation(fields: [userId], references: [id])
  userId   String

  @@id([courseId, userId])
}

model Project {
  id                     String                   @id @default(uuid())
  name                   String?
  description            String?
  timeLog                TimeLog[]
  CoursesOnProjects      CoursesOnProjects[]
  UsersOnProjects        UsersOnProjects[]
  UniversitiesOnProjects UniversitiesOnProjects[]
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt

  @@map("projects")
}

model CoursesOnProjects {
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@id([courseId, projectId])
}

model UsersOnProjects {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  @@id([userId, projectId])
}

model UniversitiesOnProjects {
  university   University @relation(fields: [universityId], references: [id])
  universityId String
  project      Project    @relation(fields: [projectId], references: [id])
  projectId    String

  @@id([universityId, projectId])
}

model TimeLog {
  id              String   @id @default(uuid())
  description     String?
  geolocalization String?
  requestedBy     User?    @relation("requestedBy", fields: [requestedById], references: [id])
  approvedBy      User?    @relation("approvedBy", fields: [approvedById], references: [id])
  deniedBy        User?    @relation("deniedBy", fields: [deniedById], references: [id])
  project         Project? @relation(fields: [projectId], references: [id])
  projectId       String?
  requestedById   String?
  approvedById    String?
  deniedById      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("timeLogs")
}
